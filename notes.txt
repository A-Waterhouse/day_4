understand when runtime errors occour
interpret console and stack traces
understand strategy for debugging 
use console.log

1st line off error output
shows filepath, where the error has occoured, might not be in the file you ran, may be a file you have linked to, location of error and line of error is shown

2nd line error is printed in the error log, shows what is going wrong in more details

rest can be syntax error etc. and more under the hood stuff inthe stack trace

these are hints about what the problem is

syntax checks happen 1st

errors are on MDN site, can give more information
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors


reference error is a runtime error, happens when the code is executed
it gets stopped if it comes up against an error
stack trace can show which method is causing an error, the line of the error etc.

stack shows the state of the calstack when the error happens


examples of errors

cannot read process of undefined (resing 'toString')
error is when trying to invoke the tostring method

console.log before the error to see whatdata type it is and if it is undefined or not

follow the error back to the source and check with console.logs
at some point there will be a part where the input goes into a function and comes out with an error

need to know what to be expecting out of the methods (eg. boolean values/numbers/strings)  and weather the values from the methods should be returned
eg. filter gives out boolean values and must be returned within the method

- solve one error at the time bit by bit
- use the console output where relevent for help
- used console.log to hone in on the location of the problem (error could be in one place but problem elsewhere)





==========================================REGEX=================================

regular expression
pattern used to match text
finds portion of text to match patter we have specified

checking vaild british currency examples

must be in correct format 
used 
str.startsWith('poundsign') && str.includes('.')
starts to get out of hand an is non specific, dot could be anywhere etc.

to much code for the whole format

regex can define patterns 


g, global search, seaches everywhere, without it it will just find 1st one
metacharacter, character set, eg. vowles, [aeiou], [a-g] inther range a to get
negated set, anything that isnt used ^ symbol, includes puncuation and spaces

quantifiers, Matches the specified quantity of the previous token. {1,3} will match 1 to 3. 
{3} will match exactly 3. {3,} will match 3 or more. 
[aeiou]{2} matches pairs, ae, ei, io, ou, finds 2 in isolation hello fails goodbye passes, 2 oo's together

+ matches one or more of the preceding token, allows to be individual match on its own
[aeiou]+ finds individual match with as many of the chars as it can find

\x is character thats not read literally

* matches 0 or more of the preceding token, either not there or there as many times eg hello!* matches hello, hello! and hello!!!

anchors, denote beginning and end, ^ match must be beginning of the string 

encased in /   /

/hello/ looks for that exact word

2 warnings about using str.match()
dont use it without global flag g
if there are no matches you get null

test returns true or false

str.match() returns an array if matched

regex follows order of the string left to right

/([aeiou]+)/ would find vowel within brackets

. matches any character
to literally look for . put \ before it \.
\d{2} to seach for 2dp after the \.
the 3dp one still works
$ makes the regex look for end of string and stop searching
/^£\d+\.\d{2}$/
was full command to find starts with £, then has numbers, then a . then only 2 numbers after the .

^ means start or means !not when in square brackets [^]











